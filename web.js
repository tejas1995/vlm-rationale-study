(()=>{"use strict";let t="https://tejassrinivasan.pythonanywhere.com/";var e=!1,n=[];let i=-1,s=null,o=null,a=null,r=null,u=0,l=0;function d(t){o=t,$("#button_answeronly_usertrusts").attr("disabled","true"),$("#button_answeronly_userdistrusts").attr("disabled","true"),$("#button_answeronly_userunsure").attr("disabled","true"),0==t?$("#button_answeronly_usertrusts").attr("activedecision","true"):1==t?$("#button_answeronly_userdistrusts").attr("activedecision","true"):2==t&&$("#button_answeronly_userunsure").attr("activedecision","true"),$("#ai_explanation_div").show()}function _(t){a=t,$("#button_withexplanation_usertrusts").attr("disabled","true"),$("#button_withexplanation_userdistrusts").attr("disabled","true"),$("#button_withexplanation_userunsure").attr("disabled","true"),0==t?$("#button_withexplanation_usertrusts").attr("activedecision","true"):1==t?$("#button_withexplanation_userdistrusts").attr("activedecision","true"):2==t&&$("#button_withexplanation_userunsure").attr("activedecision","true"),$("#ai_explanation_quality_div").show()}function c(t){r=t,$("#button_withexplanationquality_usertrusts").attr("disabled","true"),$("#button_withexplanationquality_userdistrusts").attr("disabled","true"),$("#button_withexplanationquality_userunsure").attr("disabled","true"),0==t?$("#button_withexplanationquality_usertrusts").attr("activedecision","true"):1==t?$("#button_withexplanationquality_userdistrusts").attr("activedecision","true"):2==t&&$("#button_withexplanationquality_userunsure").attr("activedecision","true"),$("#button_next").show(),$("#button_next").removeAttr("disabled")}function b(t){u+=t,0==u?$("#button_instructions_prev").attr("disabled","true"):$("#button_instructions_prev").removeAttr("disabled"),u>=6?($("#instructions_and_decorations").show(),$("#button_instructions_next").val("Start study")):($("#instructions_and_decorations").hide(),$("#button_instructions_next").val("Next")),1==u&&($("#instructions_and_decorations").show(),$("#main_box_instructions").hide(),$("#main_box_experiment").show(),h()),$("#main_box_instructions").children(":not(input)").each(((t,e)=>{$(e).hide()})),$(`#instructions_${u}`).show()}function h(){if($("#button_readytoanswer").removeAttr("activedecision"),$("#button_readytoanswer").removeAttr("disabled"),$("#button_readytoanswer").show(),$("#button_answeronly_usertrusts").removeAttr("activedecision"),$("#button_answeronly_usertrusts").removeAttr("disabled"),$("#button_answeronly_userdistrusts").removeAttr("activedecision"),$("#button_answeronly_userdistrusts").removeAttr("disabled"),$("#button_answeronly_userunsure").removeAttr("activedecision"),$("#button_answeronly_userunsure").removeAttr("disabled"),$("#ai_explanation_div").hide(),$("#ai_explanation_quality_div").hide(),$("#button_next").hide(),$("#button_quit").hide(),i+=1,i>=n.length)return $("#main_box_experiment").hide(),void(e?($("#reward_box_mock").text(`Your total reward is $${(0).toFixed(2)} (${i+1} questions answered).`),$("#reward_box_mock").show(),$("#main_box_end_mock").show()):($("#reward_box").text(`Your total reward is $${(0).toFixed(2)} (${i+1} questions answered).`),$("#reward_box").show(),$("#main_box_end").show()));s=n[i],$("#question_span").html(s.question),$("#ai_prediction_span").html(s.predicted_answer),$("#ai_explanation_span").html(s.generated_rationale);let t=Math.round(100*s["visual fidelity"]);$("#explanation_fidelity_span").html(`${t}%`);let o=Math.round(100*s.contrastiveness);$("#explanation_contrastiveness_span").html(`${o}%`),$("#progress").text(`Progress: ${i+1} / ${n.length}`)}document.getElementById("button_answeronly_usertrusts")?.addEventListener("click",(()=>d(0))),document.getElementById("button_answeronly_userdistrusts")?.addEventListener("click",(()=>d(1))),document.getElementById("button_answeronly_userunsure")?.addEventListener("click",(()=>d(2))),document.getElementById("button_withexplanation_usertrusts")?.addEventListener("click",(()=>_(0))),document.getElementById("button_withexplanation_userdistrusts")?.addEventListener("click",(()=>_(1))),document.getElementById("button_withexplanation_userunsure")?.addEventListener("click",(()=>_(2))),document.getElementById("button_withexplanationquality_usertrusts")?.addEventListener("click",(()=>c(0))),document.getElementById("button_withexplanationquality_userdistrusts")?.addEventListener("click",(()=>c(1))),document.getElementById("button_withexplanationquality_userunsure")?.addEventListener("click",(()=>c(2))),$("#button_instructions_next").on("click",(()=>b(1))),$("#button_instructions_prev").on("click",(()=>b(-1))),$("#button_next").on("click",(()=>{if(-1!=i){let e={question_i:i};e.question=s,e.count_exited_page=l,async function(e){e.url_data=globalThis.url_data,console.log("Data"),"study_id"in e.url_data||(e.url_data.study_id="trialrun_studies"),e.url_data.queue_id=globalThis.uid,console.log("logged",e),console.log("Logging to",t+"log");try{let n=await $.ajax(t+"log",{data:JSON.stringify({project:"llm-trust-study/"+e.url_data.study_id,uid:globalThis.uid+"_"+e.url_data.prolific_id,payload:JSON.stringify(e)}),type:"POST",contentType:"application/json"});return await async function(){return new Promise((t=>setTimeout(t,2e3)))}(),n}catch(t){console.log(t)}}(e),l=0}h()}));const w=new URLSearchParams(window.location.search),y=w.get("start"),m=w.get("uid");if(globalThis.url_data=function(t){const e={};for(const[n,i]of t)e[n]=i;return e}(w.entries()),null!=m){if(globalThis.uid=m,"prolific_random"==globalThis.uid){let t=`${Math.floor(10*Math.random())}`.padStart(3,"0");globalThis.uid=`${w.get("prolific_queue_name")}_${t}`}}else{let t=null;for(;null==t;)t=prompt("Enter your user id. Please get in touch if you were not assigned an id but wish to participate in this experiment.");globalThis.uid=t}globalThis.url_data.session_id.startsWith("demo")&&(e=!0),console.log("Running with UID",globalThis.uid),async function(){return await $.getJSON(`baked_queues/${globalThis.uid}.json?t=${Date.now()}`)}().catch((t=>{console.log("Invalid user id."),console.log(globalThis.uid),window.location.reload()})).then((t=>{n=t,null!=y&&(i=parseInt(y)-1,console.log("Starting from",i)),b(0),$("#main_box_instructions").show(),$("#instructions_and_decorations").hide()})),console.log("Starting session with UID:",globalThis.uid);let p=!1;document.onvisibilitychange=()=>{p||(l+=1,p=!0,p=!1)}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFJNEMsR0FBZSxFQUNuQnRELFNBQVN1RCxtQkFBcUIsS0FDckJELElBQ0RoRixHQUFxQixFQUNyQmdGLEdBQWUsRUFJZkEsR0FBZSxFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2Nvbm5lY3Rvci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgREVWTU9ERSB9IGZyb20gJy4vZ2xvYmFscydcbmltcG9ydCB7IE1PQ0tNT0RFIH0gZnJvbSAnLi9tYWluJ1xuXG5sZXQgU0VSVkVSX0xPR19ST09UID0gREVWTU9ERSA/IFwiaHR0cDovLzEyNy4wLjAuMTo1MDAwL1wiIDogXCJodHRwczovL3RlamFzc3Jpbml2YXNhbi5weXRob25hbnl3aGVyZS5jb20vXCJcblxuYXN5bmMgZnVuY3Rpb24gc2xlZXAobXM6IG51bWJlcik6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gc2V0VGltZW91dChyZXNvbHZlLCBtcykpO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbG9hZF9kYXRhKCk6IFByb21pc2U8YW55PiB7XG4gICAgLy8gaW5jbHVkZSB0aW1lc3RhbXAgc28gdGhhdCB0aGluZ3MgZG9uJ3QgZ2V0IGNhY2hlZFxuICAgIGxldCByZXN1bHQgPSBhd2FpdCAkLmdldEpTT04oXG4gICAgICAgIGBiYWtlZF9xdWV1ZXMvJHtnbG9iYWxUaGlzLnVpZH0uanNvbj90PSR7RGF0ZS5ub3coKX1gLFxuICAgIClcbiAgICByZXR1cm4gcmVzdWx0XG59XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbG9nX2RhdGEoZGF0YSk6IFByb21pc2U8YW55PiB7XG4gICAgLy9pZiAoTU9DS01PREUpIHtcbiAgICAvLyAgICBjb25zb2xlLmxvZyhcImxvZ2dlZCAobW9jaylcIiwgZGF0YSlcbiAgICAvLyAgICByZXR1cm5cbiAgICAvL31cbiAgICBcbiAgICBkYXRhW1widXJsX2RhdGFcIl0gPSBnbG9iYWxUaGlzLnVybF9kYXRhXG4gICAgY29uc29sZS5sb2coXCJEYXRhXCIpXG4gICAgaWYgKCEoXCJzdHVkeV9pZFwiIGluIGRhdGFbJ3VybF9kYXRhJ10pKSB7XG4gICAgICAgIGRhdGFbJ3VybF9kYXRhJ11bXCJzdHVkeV9pZFwiXSA9IFwidHJpYWxydW5fc3R1ZGllc1wiXG4gICAgfVxuICAgIGRhdGFbXCJ1cmxfZGF0YVwiXVtcInF1ZXVlX2lkXCJdID0gZ2xvYmFsVGhpcy51aWRcbiAgICBjb25zb2xlLmxvZyhcImxvZ2dlZFwiLCBkYXRhKVxuICAgIGNvbnNvbGUubG9nKFwiTG9nZ2luZyB0b1wiLCBTRVJWRVJfTE9HX1JPT1QgKyBcImxvZ1wiKVxuXG4gICAgdHJ5IHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IGF3YWl0ICQuYWpheChcbiAgICAgICAgICAgIFNFUlZFUl9MT0dfUk9PVCArIFwibG9nXCIsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZGF0YTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgICAgICAgICBwcm9qZWN0OiBcImxsbS10cnVzdC1zdHVkeS9cIitkYXRhWyd1cmxfZGF0YSddWydzdHVkeV9pZCddLFxuICAgICAgICAgICAgICAgICAgICB1aWQ6IGdsb2JhbFRoaXMudWlkK1wiX1wiK2RhdGFbJ3VybF9kYXRhJ11bJ3Byb2xpZmljX2lkJ10sXG4gICAgICAgICAgICAgICAgICAgIHBheWxvYWQ6IEpTT04uc3RyaW5naWZ5KGRhdGEpLFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIHR5cGU6ICdQT1NUJyxcbiAgICAgICAgICAgICAgICBjb250ZW50VHlwZTogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgfVxuICAgICAgICApXG4gICAgICAgIGF3YWl0IHNsZWVwKDIwMDApO1xuICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zb2xlLmxvZyhlKVxuICAgIH1cbn0iLCJpbXBvcnQgeyBERVZNT0RFIH0gZnJvbSBcIi4vZ2xvYmFsc1wiXG5leHBvcnQgdmFyIFVJRDogc3RyaW5nXG5leHBvcnQgdmFyIE1PQ0tNT0RFOiBib29sZWFuID0gZmFsc2VcbmltcG9ydCB7IGxvYWRfZGF0YSwgbG9nX2RhdGEgfSBmcm9tICcuL2Nvbm5lY3RvcidcbmltcG9ydCB7IHBhcmFtc1RvT2JqZWN0IH0gZnJvbSBcIi4vdXRpbHNcIlxuXG52YXIgZGF0YTogYW55W10gPSBbXVxubGV0IHF1ZXN0aW9uX2kgPSAtMVxubGV0IHF1ZXN0aW9uOiBhbnkgPSBudWxsXG5sZXQgdXNlcnNlbGVjdGlvbl9hbnN3ZXJvbmx5OiBudW1iZXIgPSAtMVxubGV0IHVzZXJzZWxlY3Rpb25fd2l0aGV4cGxhbmF0aW9uOiBudW1iZXIgPSAtMVxubGV0IHVzZXJzZWxlY3Rpb25fd2l0aGV4cGxhbmF0aW9ucXVhbGl0eTogbnVtYmVyID0gLTFcbmxldCBiYWxhbmNlID0gMFxuLy9sZXQgdGltZV9xdWVzdGlvbl9zdGFydDogbnVtYmVyXG4vL2xldCB0aW1lX3RvX2FjY2Vzc19leHBsYW5hdGlvbjogbnVtYmVyID0gLTFcbi8vbGV0IHRpbWVfdG9fYWNjZXNzX3NvdXJjZXM6IG51bWJlciA9IC0xXG4vL2xldCB0aW1lX3RvX2FjY2Vzc19pbmRpdmlkdWFsX3NvdXJjZTogYW55W10gPSBbLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTFdXG4vL2xldCB0aW1lX2ZpbmFsX2RlY2lzaW9uOiBudW1iZXIgPSAtMVxubGV0IGluc3RydWN0aW9uX2k6IG51bWJlciA9IDBcbmxldCBjb3VudF9leGl0ZWRfcGFnZTogbnVtYmVyID0gMFxuXG5mdW5jdGlvbiBhc3NlcnQoY29uZGl0aW9uLCBtZXNzYWdlKSB7XG4gICAgaWYgKCFjb25kaXRpb24pIHtcbiAgICAgICAgdGhyb3cgbWVzc2FnZSB8fCBcIkFzc2VydGlvbiBmYWlsZWRcIjtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHJlZ2lzdGVyQW5zd2VyT25seVVzZXJTZWxlY3Rpb24odXNlcl9jaG9pY2U6IG51bWJlcikge1xuICAgIHVzZXJzZWxlY3Rpb25fYW5zd2Vyb25seSA9IHVzZXJfY2hvaWNlXG5cbiAgICAkKFwiI2J1dHRvbl9hbnN3ZXJvbmx5X3VzZXJ0cnVzdHNcIikuYXR0cihcImRpc2FibGVkXCIsIFwidHJ1ZVwiKVxuICAgICQoXCIjYnV0dG9uX2Fuc3dlcm9ubHlfdXNlcmRpc3RydXN0c1wiKS5hdHRyKFwiZGlzYWJsZWRcIiwgXCJ0cnVlXCIpXG4gICAgJChcIiNidXR0b25fYW5zd2Vyb25seV91c2VydW5zdXJlXCIpLmF0dHIoXCJkaXNhYmxlZFwiLCBcInRydWVcIilcbiAgICBpZiAodXNlcl9jaG9pY2UgPT0gMCkge1xuICAgICAgICAkKFwiI2J1dHRvbl9hbnN3ZXJvbmx5X3VzZXJ0cnVzdHNcIikuYXR0cihcImFjdGl2ZWRlY2lzaW9uXCIsIFwidHJ1ZVwiKVxuICAgIH0gZWxzZSBpZiAodXNlcl9jaG9pY2UgPT0gMSkge1xuICAgICAgICAkKFwiI2J1dHRvbl9hbnN3ZXJvbmx5X3VzZXJkaXN0cnVzdHNcIikuYXR0cihcImFjdGl2ZWRlY2lzaW9uXCIsIFwidHJ1ZVwiKVxuICAgIH0gZWxzZSBpZiAodXNlcl9jaG9pY2UgPT0gMikge1xuICAgICAgICAkKFwiI2J1dHRvbl9hbnN3ZXJvbmx5X3VzZXJ1bnN1cmVcIikuYXR0cihcImFjdGl2ZWRlY2lzaW9uXCIsIFwidHJ1ZVwiKVxuICAgIH1cbiAgICAkKFwiI2FpX2V4cGxhbmF0aW9uX2RpdlwiKS5zaG93KClcbn1cbi8vIEV2ZW50IGxpc3RlbmVyIGZvciB0aGUgYnV0dG9uIGNsaWNrXG5kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYnV0dG9uX2Fuc3dlcm9ubHlfdXNlcnRydXN0cycpPy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHJlZ2lzdGVyQW5zd2VyT25seVVzZXJTZWxlY3Rpb24oMCkpO1xuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2J1dHRvbl9hbnN3ZXJvbmx5X3VzZXJkaXN0cnVzdHMnKT8uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiByZWdpc3RlckFuc3dlck9ubHlVc2VyU2VsZWN0aW9uKDEpKTtcbmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdidXR0b25fYW5zd2Vyb25seV91c2VydW5zdXJlJyk/LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gcmVnaXN0ZXJBbnN3ZXJPbmx5VXNlclNlbGVjdGlvbigyKSk7XG5cblxuZnVuY3Rpb24gcmVnaXN0ZXJXaXRoRXhwbGFuYXRpb25Vc2VyU2VsZWN0aW9uKHVzZXJfY2hvaWNlOiBudW1iZXIpIHtcbiAgICB1c2Vyc2VsZWN0aW9uX3dpdGhleHBsYW5hdGlvbiA9IHVzZXJfY2hvaWNlXG5cbiAgICAkKFwiI2J1dHRvbl93aXRoZXhwbGFuYXRpb25fdXNlcnRydXN0c1wiKS5hdHRyKFwiZGlzYWJsZWRcIiwgXCJ0cnVlXCIpXG4gICAgJChcIiNidXR0b25fd2l0aGV4cGxhbmF0aW9uX3VzZXJkaXN0cnVzdHNcIikuYXR0cihcImRpc2FibGVkXCIsIFwidHJ1ZVwiKVxuICAgICQoXCIjYnV0dG9uX3dpdGhleHBsYW5hdGlvbl91c2VydW5zdXJlXCIpLmF0dHIoXCJkaXNhYmxlZFwiLCBcInRydWVcIilcbiAgICBpZiAodXNlcl9jaG9pY2UgPT0gMCkge1xuICAgICAgICAkKFwiI2J1dHRvbl93aXRoZXhwbGFuYXRpb25fdXNlcnRydXN0c1wiKS5hdHRyKFwiYWN0aXZlZGVjaXNpb25cIiwgXCJ0cnVlXCIpXG4gICAgfSBlbHNlIGlmICh1c2VyX2Nob2ljZSA9PSAxKSB7XG4gICAgICAgICQoXCIjYnV0dG9uX3dpdGhleHBsYW5hdGlvbl91c2VyZGlzdHJ1c3RzXCIpLmF0dHIoXCJhY3RpdmVkZWNpc2lvblwiLCBcInRydWVcIilcbiAgICB9IGVsc2UgaWYgKHVzZXJfY2hvaWNlID09IDIpIHtcbiAgICAgICAgJChcIiNidXR0b25fd2l0aGV4cGxhbmF0aW9uX3VzZXJ1bnN1cmVcIikuYXR0cihcImFjdGl2ZWRlY2lzaW9uXCIsIFwidHJ1ZVwiKVxuICAgIH1cbiAgICAkKFwiI2FpX2V4cGxhbmF0aW9uX3F1YWxpdHlfZGl2XCIpLnNob3coKVxufVxuXG5kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYnV0dG9uX3dpdGhleHBsYW5hdGlvbl91c2VydHJ1c3RzJyk/LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gcmVnaXN0ZXJXaXRoRXhwbGFuYXRpb25Vc2VyU2VsZWN0aW9uKDApKTtcbmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdidXR0b25fd2l0aGV4cGxhbmF0aW9uX3VzZXJkaXN0cnVzdHMnKT8uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiByZWdpc3RlcldpdGhFeHBsYW5hdGlvblVzZXJTZWxlY3Rpb24oMSkpO1xuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2J1dHRvbl93aXRoZXhwbGFuYXRpb25fdXNlcnVuc3VyZScpPy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHJlZ2lzdGVyV2l0aEV4cGxhbmF0aW9uVXNlclNlbGVjdGlvbigyKSk7XG4gIFxuZnVuY3Rpb24gcmVnaXN0ZXJXaXRoRXhwbGFuYXRpb25RdWFsaXR5VXNlclNlbGVjdGlvbih1c2VyX2Nob2ljZTogbnVtYmVyKSB7XG4gICAgdXNlcnNlbGVjdGlvbl93aXRoZXhwbGFuYXRpb25xdWFsaXR5ID0gdXNlcl9jaG9pY2VcblxuICAgICQoXCIjYnV0dG9uX3dpdGhleHBsYW5hdGlvbnF1YWxpdHlfdXNlcnRydXN0c1wiKS5hdHRyKFwiZGlzYWJsZWRcIiwgXCJ0cnVlXCIpXG4gICAgJChcIiNidXR0b25fd2l0aGV4cGxhbmF0aW9ucXVhbGl0eV91c2VyZGlzdHJ1c3RzXCIpLmF0dHIoXCJkaXNhYmxlZFwiLCBcInRydWVcIilcbiAgICAkKFwiI2J1dHRvbl93aXRoZXhwbGFuYXRpb25xdWFsaXR5X3VzZXJ1bnN1cmVcIikuYXR0cihcImRpc2FibGVkXCIsIFwidHJ1ZVwiKVxuICAgIGlmICh1c2VyX2Nob2ljZSA9PSAwKSB7XG4gICAgICAgICQoXCIjYnV0dG9uX3dpdGhleHBsYW5hdGlvbnF1YWxpdHlfdXNlcnRydXN0c1wiKS5hdHRyKFwiYWN0aXZlZGVjaXNpb25cIiwgXCJ0cnVlXCIpXG4gICAgfSBlbHNlIGlmICh1c2VyX2Nob2ljZSA9PSAxKSB7XG4gICAgICAgICQoXCIjYnV0dG9uX3dpdGhleHBsYW5hdGlvbnF1YWxpdHlfdXNlcmRpc3RydXN0c1wiKS5hdHRyKFwiYWN0aXZlZGVjaXNpb25cIiwgXCJ0cnVlXCIpXG4gICAgfSBlbHNlIGlmICh1c2VyX2Nob2ljZSA9PSAyKSB7XG4gICAgICAgICQoXCIjYnV0dG9uX3dpdGhleHBsYW5hdGlvbnF1YWxpdHlfdXNlcnVuc3VyZVwiKS5hdHRyKFwiYWN0aXZlZGVjaXNpb25cIiwgXCJ0cnVlXCIpXG4gICAgfVxuICAgICQoXCIjYnV0dG9uX25leHRcIikuc2hvdygpXG4gICAgJChcIiNidXR0b25fbmV4dFwiKS5yZW1vdmVBdHRyKFwiZGlzYWJsZWRcIilcbn1cblxuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2J1dHRvbl93aXRoZXhwbGFuYXRpb25xdWFsaXR5X3VzZXJ0cnVzdHMnKT8uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiByZWdpc3RlcldpdGhFeHBsYW5hdGlvblF1YWxpdHlVc2VyU2VsZWN0aW9uKDApKTtcbmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdidXR0b25fd2l0aGV4cGxhbmF0aW9ucXVhbGl0eV91c2VyZGlzdHJ1c3RzJyk/LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gcmVnaXN0ZXJXaXRoRXhwbGFuYXRpb25RdWFsaXR5VXNlclNlbGVjdGlvbigxKSk7XG5kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYnV0dG9uX3dpdGhleHBsYW5hdGlvbnF1YWxpdHlfdXNlcnVuc3VyZScpPy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHJlZ2lzdGVyV2l0aEV4cGxhbmF0aW9uUXVhbGl0eVVzZXJTZWxlY3Rpb24oMikpO1xuXG5cblxuXG5mdW5jdGlvbiBuZXh0X2luc3RydWN0aW9ucyhpbmNyZW1lbnQ6IG51bWJlcikge1xuICAgIGluc3RydWN0aW9uX2kgKz0gaW5jcmVtZW50XG5cbiAgICBpZiAoaW5zdHJ1Y3Rpb25faSA9PSAwKSB7XG4gICAgICAgICQoXCIjYnV0dG9uX2luc3RydWN0aW9uc19wcmV2XCIpLmF0dHIoXCJkaXNhYmxlZFwiLCBcInRydWVcIilcbiAgICB9IGVsc2Uge1xuICAgICAgICAkKFwiI2J1dHRvbl9pbnN0cnVjdGlvbnNfcHJldlwiKS5yZW1vdmVBdHRyKFwiZGlzYWJsZWRcIilcbiAgICB9XG4gICAgaWYgKGluc3RydWN0aW9uX2kgPj0gNikge1xuICAgICAgICAkKFwiI2luc3RydWN0aW9uc19hbmRfZGVjb3JhdGlvbnNcIikuc2hvdygpXG4gICAgICAgICQoXCIjYnV0dG9uX2luc3RydWN0aW9uc19uZXh0XCIpLnZhbChcIlN0YXJ0IHN0dWR5XCIpXG4gICAgfSBlbHNlIHtcbiAgICAgICAgJChcIiNpbnN0cnVjdGlvbnNfYW5kX2RlY29yYXRpb25zXCIpLmhpZGUoKVxuICAgICAgICAkKFwiI2J1dHRvbl9pbnN0cnVjdGlvbnNfbmV4dFwiKS52YWwoXCJOZXh0XCIpXG4gICAgfVxuICAgIGlmIChpbnN0cnVjdGlvbl9pID09IDEpIHtcbiAgICAgICAgJChcIiNpbnN0cnVjdGlvbnNfYW5kX2RlY29yYXRpb25zXCIpLnNob3coKVxuICAgICAgICAkKFwiI21haW5fYm94X2luc3RydWN0aW9uc1wiKS5oaWRlKClcbiAgICAgICAgJChcIiNtYWluX2JveF9leHBlcmltZW50XCIpLnNob3coKVxuICAgICAgICBuZXh0X3F1ZXN0aW9uKClcbiAgICB9XG5cbiAgICAkKFwiI21haW5fYm94X2luc3RydWN0aW9uc1wiKS5jaGlsZHJlbihcIjpub3QoaW5wdXQpXCIpLmVhY2goKF8sIGVsKSA9PiB7XG4gICAgICAgICQoZWwpLmhpZGUoKVxuICAgIH0pXG4gICAgJChgI2luc3RydWN0aW9uc18ke2luc3RydWN0aW9uX2l9YCkuc2hvdygpXG59XG4kKFwiI2J1dHRvbl9pbnN0cnVjdGlvbnNfbmV4dFwiKS5vbihcImNsaWNrXCIsICgpID0+IG5leHRfaW5zdHJ1Y3Rpb25zKCsxKSlcbiQoXCIjYnV0dG9uX2luc3RydWN0aW9uc19wcmV2XCIpLm9uKFwiY2xpY2tcIiwgKCkgPT4gbmV4dF9pbnN0cnVjdGlvbnMoLTEpKVxuXG4kKFwiI2J1dHRvbl9uZXh0XCIpLm9uKFwiY2xpY2tcIiwgKCkgPT4ge1xuXG4gICAgLy9sZXQgZ3RfbGFiZWw6IGJvb2xlYW4gPSBxdWVzdGlvbiFbXCJndF9sYWJlbFwiXVxuICAgIC8vbGV0IHVzZXJfaXNfY29ycmVjdDogYm9vbGVhbiA9IGd0X2xhYmVsID09IGZpbmFsX3VzZXJfZGVjaXNpb25cbiAgICAvL2lmICh1c2VyX2lzX2NvcnJlY3QpIHtcbiAgICAvLyAgICBiYWxhbmNlICs9IDAuMVxuICAgIC8vfVxuXG4gICAgaWYgKHF1ZXN0aW9uX2kgIT0gLTEpIHtcbiAgICAgICAgbGV0IGxvZ2dlZF9kYXRhID0ge1xuICAgICAgICAgICAgXCJxdWVzdGlvbl9pXCI6IHF1ZXN0aW9uX2ksXG4gICAgICAgICAgICAvL1widXNlcl9iYWxhbmNlX3Bvc3RfaW50ZXJhY3Rpb25cIjogYmFsYW5jZSxcbiAgICAgICAgICAgIC8vXCJmaW5hbF91c2VyX2RlY2lzaW9uXCI6IGZpbmFsX3VzZXJfZGVjaXNpb24sXG4gICAgICAgICAgICAvL1widXNlcl9pc19jb3JyZWN0XCI6IHVzZXJfaXNfY29ycmVjdCxcbiAgICAgICAgICAgIC8vXCJhY2Nlc3NlZF9leHBsYW5hdGlvblwiOiBhY2Nlc3NlZF9leHBsYW5hdGlvbixcbiAgICAgICAgICAgIC8vXCJhY2Nlc3NlZF9zb3VyY2VzXCI6IGFjY2Vzc2VkX3NvdXJjZXMsXG4gICAgICAgICAgICAvL1wiYWNjZXNzZWRfaW5kaXZpZHVhbF9zb3VyY2VcIjogYWNjZXNzZWRfaW5kaXZpZHVhbF9zb3VyY2UsXG4gICAgICAgIH1cblxuICAgICAgICBsb2dnZWRfZGF0YVsncXVlc3Rpb24nXSA9IHF1ZXN0aW9uXG4gICAgICAgIGxvZ2dlZF9kYXRhWydjb3VudF9leGl0ZWRfcGFnZSddID0gY291bnRfZXhpdGVkX3BhZ2VcbiAgICAgICAgbG9nX2RhdGEobG9nZ2VkX2RhdGEpXG4gICAgICAgIGNvdW50X2V4aXRlZF9wYWdlID0gMFxuICAgIH1cbiAgICBcblxuICAgIG5leHRfcXVlc3Rpb24oKVxufSk7XG5cblxuXG5mdW5jdGlvbiBzaG93X3Jlc3VsdCgpIHtcblxuXG4gICAgLy9sZXQgYWlfaXNfY29ycmVjdDogYm9vbGVhbiA9IHF1ZXN0aW9uIVtcImxsbV9pc19jb3JyZWN0XCJdXG4gICAgLy9sZXQgbWVzc2FnZSA9IFwiQ29ycmVjdCBhbnN3ZXI6IDxiPk9wdGlvbiBcIiArIGNvcnJlY3Rfb3B0aW9uICsgXCI8L2I+Ljxicj5cIlxuICAgIC8vaWYgKHVzZXJfaXNfY29ycmVjdCkge1xuICAgIC8vICAgIG1lc3NhZ2UgKz0gXCJZb3UgcGlja2VkIE9wdGlvbiBcIiArIGZpbmFsX3VzZXJfZGVjaXNpb24gKyBcIiwgd2hpY2ggd2FzIDxzcGFuIGNsYXNzPSdjb2xvcl9jb3JyZWN0Jz48Yj5jb3JyZWN0PC9iPjwvc3Bhbj4uPGJyPlwiXG4gICAgLy99XG4gICAgLy9lbHNlIHtcbiAgICAvLyAgICBtZXNzYWdlICs9IFwiWW91IHBpY2tlZCBPcHRpb24gXCIgKyBmaW5hbF91c2VyX2RlY2lzaW9uICsgXCIsIHdoaWNoIHdhcyA8c3BhbiBjbGFzcz0nY29sb3JfaW5jb3JyZWN0Jz48Yj5pbmNvcnJlY3Q8L2I+PC9zcGFuPi48YnI+XCJcbiAgICAvL31cbiAgICAvL2lmIChhaV9pc19jb3JyZWN0KSB7XG4gICAgLy8gICAgbWVzc2FnZSArPSBcIlRoZSBBSSBwaWNrZWQgT3B0aW9uIFwiICsgcXVlc3Rpb24hW1wiYWlfcHJlZGljdGlvblwiXSArIFwiLCB3aGljaCB3YXMgPHNwYW4gY2xhc3M9J2NvbG9yX2NvcnJlY3QnPjxiPmNvcnJlY3Q8Yj48L3NwYW4+Ljxicj5cIlxuICAgIC8vfVxuICAgIC8vZWxzZSB7XG4gICAgLy8gICAgbWVzc2FnZSArPSBcIlRoZSBBSSBwaWNrZWQgT3B0aW9uIFwiICsgcXVlc3Rpb24hW1wiYWlfcHJlZGljdGlvblwiXSArIFwiLCB3aGljaCB3YXMgPHNwYW4gY2xhc3M9J2NvbG9yX2luY29ycmVjdCc+PGI+aW5jb3JyZWN0PC9iPjwvc3Bhbj4uPGJyPlwiXG4gICAgLy99XG4gICAgLy9pZiAodXNlcl9pc19jb3JyZWN0KSB7XG4gICAgLy8gICAgbWVzc2FnZSArPSBcIjxzcGFuIGNsYXNzPSdjb2xvcl9jb3JyZWN0Jz48Yj5Zb3UgcmVjZWl2ZSBhIHJld2FyZCBvZiAkMC4xMC48L2I+PC9zcGFuPlwiXG4gICAgLy8gICAgYmFsYW5jZSArPSAwLjFcbiAgICAvL31cbiAgICAvL2Vsc2Uge1xuICAgIC8vICAgIG1lc3NhZ2UgKz0gXCI8c3BhbiBjbGFzcz0nY29sb3JfaW5jb3JyZWN0Jz48Yj5Zb3UgZG8gbm90IHJlY2VpdmUgYW55IHJld2FyZC48L2I+PC9zcGFuPlwiXG4gICAgLy99XG4gICAgLy9tZXNzYWdlICs9IFwiPGJyPlwiXG4gICAgLy9pZiAoc3VjY2Vzcykge1xuICAgIC8vICAgIG1lc3NhZ2UgKz0gYFlvdSBnYWluICQkeyhiZXRfdmFsKmJldF92YWxfcmF0aW8pLnRvRml4ZWQoMil9LmBcbiAgICAvLyAgICBiYWxhbmNlICs9IGJldF92YWwqYmV0X3ZhbF9yYXRpb1xuICAgIC8vfSBlbHNlIHtcbiAgICAvLyAgICBtZXNzYWdlICs9IGBZb3UgbG9zZSAkJHsoYmV0X3ZhbC8xLjApLnRvRml4ZWQoMil9LmBcbiAgICAvLyAgICBiYWxhbmNlIC09IGJldF92YWwvMS4wXG4gICAgLy8gICAgYmFsYW5jZSA9IE1hdGgubWF4KDAsIGJhbGFuY2UpXG4gICAgLy99XG4gICAgLy8kKFwiI2JhbGFuY2VcIikudGV4dChgQmFsYW5jZTogJCR7YmFsYW5jZS50b0ZpeGVkKDIpfSArICQxLjBgKVxuICAgIC8vJChcIiNyZXN1bHRfc3BhblwiKS5odG1sKG1lc3NhZ2UpXG4gICAgLy8vLyQoXCIjYnV0dG9uX25leHRcIikuc2hvdygpXG4gICAgLy8kKFwiI3Jlc3VsdF9zcGFuXCIpLnNob3coKVxuICAgIC8vJChcIiNidXR0b25fcGxhY2VfYmV0XCIpLmhpZGUoKVxuXG4gICAgLy8kKCcjcmFuZ2VfdmFsJykuYXR0cihcImRpc2FibGVkXCIsIFwidHJ1ZVwiKVxufVxuXG4vLyQoXCIjYnV0dG9uX3BsYWNlX2JldFwiKS5vbihcImNsaWNrXCIsIHNob3dfcmVzdWx0KVxuXG5mdW5jdGlvbiBuZXh0X3F1ZXN0aW9uKCkge1xuICAgIC8vIHJlc3RvcmUgcHJldmlvdXMgc3RhdGUgb2YgVUlcblxuICAgICQoXCIjYnV0dG9uX3JlYWR5dG9hbnN3ZXJcIikucmVtb3ZlQXR0cihcImFjdGl2ZWRlY2lzaW9uXCIpXG4gICAgJChcIiNidXR0b25fcmVhZHl0b2Fuc3dlclwiKS5yZW1vdmVBdHRyKFwiZGlzYWJsZWRcIilcbiAgICAkKFwiI2J1dHRvbl9yZWFkeXRvYW5zd2VyXCIpLnNob3coKVxuXG4gICAgJChcIiNidXR0b25fYW5zd2Vyb25seV91c2VydHJ1c3RzXCIpLnJlbW92ZUF0dHIoXCJhY3RpdmVkZWNpc2lvblwiKVxuICAgICQoXCIjYnV0dG9uX2Fuc3dlcm9ubHlfdXNlcnRydXN0c1wiKS5yZW1vdmVBdHRyKFwiZGlzYWJsZWRcIilcbiAgICAkKFwiI2J1dHRvbl9hbnN3ZXJvbmx5X3VzZXJkaXN0cnVzdHNcIikucmVtb3ZlQXR0cihcImFjdGl2ZWRlY2lzaW9uXCIpXG4gICAgJChcIiNidXR0b25fYW5zd2Vyb25seV91c2VyZGlzdHJ1c3RzXCIpLnJlbW92ZUF0dHIoXCJkaXNhYmxlZFwiKVxuICAgICQoXCIjYnV0dG9uX2Fuc3dlcm9ubHlfdXNlcnVuc3VyZVwiKS5yZW1vdmVBdHRyKFwiYWN0aXZlZGVjaXNpb25cIilcbiAgICAkKFwiI2J1dHRvbl9hbnN3ZXJvbmx5X3VzZXJ1bnN1cmVcIikucmVtb3ZlQXR0cihcImRpc2FibGVkXCIpXG5cbiAgICAkKFwiI2FpX2V4cGxhbmF0aW9uX2RpdlwiKS5oaWRlKClcbiAgICAkKFwiI2FpX2V4cGxhbmF0aW9uX3F1YWxpdHlfZGl2XCIpLmhpZGUoKVxuXG5cbiAgICAvL3RpbWVfdG9fYWNjZXNzX2V4cGxhbmF0aW9uID0gLTFcbiAgICAvL3RpbWVfdG9fYWNjZXNzX3NvdXJjZXMgPSAtMVxuICAgIC8vdGltZV90b19hY2Nlc3NfaW5kaXZpZHVhbF9zb3VyY2UgPSBbLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTFdXG4gICAgLy90aW1lX2ZpbmFsX2RlY2lzaW9uID0gLTFcbiAgICBcblxuICAgICQoXCIjYnV0dG9uX25leHRcIikuaGlkZSgpXG4gICAgJCgnI2J1dHRvbl9xdWl0JykuaGlkZSgpXG4gICAgLy8kKFwiI3JhbmdlX3ZhbFwiKS52YWwodXNlcl90cnVzdClcblxuICAgIHF1ZXN0aW9uX2kgKz0gMVxuICAgIGlmIChxdWVzdGlvbl9pID49IGRhdGEubGVuZ3RoKSB7XG4gICAgICAgICQoXCIjbWFpbl9ib3hfZXhwZXJpbWVudFwiKS5oaWRlKClcbiAgICAgICAgaWYgKE1PQ0tNT0RFKSB7XG4gICAgICAgICAgICAkKCcjcmV3YXJkX2JveF9tb2NrJykudGV4dChgWW91ciB0b3RhbCByZXdhcmQgaXMgJCR7YmFsYW5jZS50b0ZpeGVkKDIpfSAoJHtxdWVzdGlvbl9pKzF9IHF1ZXN0aW9ucyBhbnN3ZXJlZCkuYClcbiAgICAgICAgICAgICQoJyNyZXdhcmRfYm94X21vY2snKS5zaG93KClcbiAgICAgICAgICAgICQoXCIjbWFpbl9ib3hfZW5kX21vY2tcIikuc2hvdygpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAkKCcjcmV3YXJkX2JveCcpLnRleHQoYFlvdXIgdG90YWwgcmV3YXJkIGlzICQke2JhbGFuY2UudG9GaXhlZCgyKX0gKCR7cXVlc3Rpb25faSsxfSBxdWVzdGlvbnMgYW5zd2VyZWQpLmApXG4gICAgICAgICAgICAkKCcjcmV3YXJkX2JveCcpLnNob3coKVxuICAgICAgICAgICAgJChcIiNtYWluX2JveF9lbmRcIikuc2hvdygpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuXG4gICAgfVxuICAgIHF1ZXN0aW9uID0gZGF0YVtxdWVzdGlvbl9pXVxuXG4gICAgJChcIiNxdWVzdGlvbl9zcGFuXCIpLmh0bWwocXVlc3Rpb24hW1wicXVlc3Rpb25cIl0pXG4gICAgJChcIiNhaV9wcmVkaWN0aW9uX3NwYW5cIikuaHRtbChxdWVzdGlvbiFbXCJwcmVkaWN0ZWRfYW5zd2VyXCJdKVxuICAgICQoXCIjYWlfZXhwbGFuYXRpb25fc3BhblwiKS5odG1sKHF1ZXN0aW9uIVtcImdlbmVyYXRlZF9yYXRpb25hbGVcIl0pXG4gICAgbGV0IHZpc3VhbF9maWRlbGl0eV9jb25mID0gTWF0aC5yb3VuZChxdWVzdGlvbiFbXCJ2aXN1YWwgZmlkZWxpdHlcIl0gKiAxMDApXG4gICAgJChcIiNleHBsYW5hdGlvbl9maWRlbGl0eV9zcGFuXCIpLmh0bWwoYCR7dmlzdWFsX2ZpZGVsaXR5X2NvbmZ9JWApXG4gICAgbGV0IHZpc3VhbF9jb250cmFzdGl2ZW5lc3NfY29uZiA9IE1hdGgucm91bmQocXVlc3Rpb24hW1wiY29udHJhc3RpdmVuZXNzXCJdICogMTAwKVxuICAgICQoXCIjZXhwbGFuYXRpb25fY29udHJhc3RpdmVuZXNzX3NwYW5cIikuaHRtbChgJHt2aXN1YWxfY29udHJhc3RpdmVuZXNzX2NvbmZ9JWApXG5cblxuICAgIC8vIHNldCBiZXQgdmFsdWUgcmF0aW9cbiAgICAvL2lmKHF1ZXN0aW9uLmhhc093blByb3BlcnR5KFwicmV3YXJkX3JhdGlvXCIpKSB7XG4gICAgLy8gICAgbGV0IFtyYXRpbzEsIHJhdGlvMl0gPSBxdWVzdGlvbltcInJld2FyZF9yYXRpb1wiXVxuICAgIC8vICAgIHJhdGlvMSA9IE51bWJlcihyYXRpbzEpXG4gICAgLy8gICAgcmF0aW8yID0gTnVtYmVyKHJhdGlvMilcbiAgICAvLyAgICBiZXRfdmFsX3JhdGlvID0gcmF0aW8xL3JhdGlvMlxuICAgIC8vfSBlbHNlIHtcbiAgICAvLyAgICBiZXRfdmFsX3JhdGlvID0gMVxuICAgIC8vfVxuXG4gICAgLy90aW1lX3F1ZXN0aW9uX3N0YXJ0ID0gRGF0ZS5ub3coKVxuICAgICQoXCIjcHJvZ3Jlc3NcIikudGV4dChgUHJvZ3Jlc3M6ICR7cXVlc3Rpb25faSArIDF9IC8gJHtkYXRhLmxlbmd0aH1gKVxufVxuXG4vLyBnZXQgdXNlciBpZCBhbmQgbG9hZCBxdWV1ZVxuLy8gdHJ5IHRvIHNlZSBpZiBzdGFydCBvdmVycmlkZSB3YXMgcGFzc2VkXG5jb25zdCB1cmxQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpO1xuY29uc3Qgc3RhcnRPdmVycmlkZSA9IHVybFBhcmFtcy5nZXQoJ3N0YXJ0Jyk7XG5jb25zdCBVSURGcm9tVVJMID0gdXJsUGFyYW1zLmdldChcInVpZFwiKVxuZ2xvYmFsVGhpcy51cmxfZGF0YSA9IHBhcmFtc1RvT2JqZWN0KHVybFBhcmFtcy5lbnRyaWVzKCkpXG5cbmlmIChVSURGcm9tVVJMICE9IG51bGwpIHtcbiAgICBnbG9iYWxUaGlzLnVpZCA9IFVJREZyb21VUkwgYXMgc3RyaW5nXG4gICAgaWYgKGdsb2JhbFRoaXMudWlkID09IFwicHJvbGlmaWNfcmFuZG9tXCIpIHtcbiAgICAgICAgbGV0IHF1ZXVlX2lkID0gYCR7TWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTApfWAucGFkU3RhcnQoMywgXCIwXCIpXG4gICAgICAgIGdsb2JhbFRoaXMudWlkID0gYCR7dXJsUGFyYW1zLmdldChcInByb2xpZmljX3F1ZXVlX25hbWVcIil9XyR7cXVldWVfaWR9YFxuICAgIH1cbn0gZWxzZSBpZiAoREVWTU9ERSkge1xuICAgIGdsb2JhbFRoaXMudWlkID0gXCJkZW1vXCJcbn0gZWxzZSB7XG4gICAgbGV0IFVJRF9tYXliZTogYW55ID0gbnVsbFxuICAgIHdoaWxlIChVSURfbWF5YmUgPT0gbnVsbCkge1xuICAgICAgICBVSURfbWF5YmUgPSBwcm9tcHQoXCJFbnRlciB5b3VyIHVzZXIgaWQuIFBsZWFzZSBnZXQgaW4gdG91Y2ggaWYgeW91IHdlcmUgbm90IGFzc2lnbmVkIGFuIGlkIGJ1dCB3aXNoIHRvIHBhcnRpY2lwYXRlIGluIHRoaXMgZXhwZXJpbWVudC5cIilcbiAgICB9XG4gICAgZ2xvYmFsVGhpcy51aWQgPSBVSURfbWF5YmUhXG59XG5cbi8vIHZlcnNpb24gZm9yIHBhcGVyXG5pZiAoREVWTU9ERSkge1xuICAgIE1PQ0tNT0RFID0gdHJ1ZVxufSBlbHNlIGlmIChnbG9iYWxUaGlzLnVybF9kYXRhWydzZXNzaW9uX2lkJ10uc3RhcnRzV2l0aChcImRlbW9cIikpIHtcbiAgICBNT0NLTU9ERSA9IHRydWVcbn1cblxuY29uc29sZS5sb2coXCJSdW5uaW5nIHdpdGggVUlEXCIsIGdsb2JhbFRoaXMudWlkKVxubG9hZF9kYXRhKCkuY2F0Y2goKF9lcnJvcikgPT4ge1xuICAgIC8vYWxlcnQoXCJJbnZhbGlkIHVzZXIgaWQuXCIpXG4gICAgY29uc29sZS5sb2coXCJJbnZhbGlkIHVzZXIgaWQuXCIpXG4gICAgY29uc29sZS5sb2coZ2xvYmFsVGhpcy51aWQhKVxuICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKVxufVxuKS50aGVuKChuZXdfZGF0YSkgPT4ge1xuICAgIGRhdGEgPSBuZXdfZGF0YVxuICAgIGlmIChzdGFydE92ZXJyaWRlICE9IG51bGwpIHtcbiAgICAgICAgcXVlc3Rpb25faSA9IHBhcnNlSW50KHN0YXJ0T3ZlcnJpZGUpIC0gMVxuICAgICAgICBjb25zb2xlLmxvZyhcIlN0YXJ0aW5nIGZyb21cIiwgcXVlc3Rpb25faSlcbiAgICB9XG4gICAgLy8gbmV4dF9xdWVzdGlvbigpXG4gICAgbmV4dF9pbnN0cnVjdGlvbnMoMClcbiAgICAkKFwiI21haW5fYm94X2luc3RydWN0aW9uc1wiKS5zaG93KClcbiAgICAkKFwiI2luc3RydWN0aW9uc19hbmRfZGVjb3JhdGlvbnNcIikuaGlkZSgpXG59KVxuXG5jb25zb2xlLmxvZyhcIlN0YXJ0aW5nIHNlc3Npb24gd2l0aCBVSUQ6XCIsIGdsb2JhbFRoaXMudWlkISlcblxubGV0IGFsZXJ0X2FjdGl2ZSA9IGZhbHNlXG5kb2N1bWVudC5vbnZpc2liaWxpdHljaGFuZ2UgPSAoKSA9PiB7XG4gICAgaWYgKCFhbGVydF9hY3RpdmUpIHtcbiAgICAgICAgY291bnRfZXhpdGVkX3BhZ2UgKz0gMVxuICAgICAgICBhbGVydF9hY3RpdmUgPSB0cnVlXG4gICAgICAgIC8vaWYgKCEoZ2xvYmFsVGhpcy51aWQhLnN0YXJ0c1dpdGgoXCJkZW1vXCIpKSkge1xuICAgICAgICAvLyAgICBhbGVydChcIlBsZWFzZSBkb24ndCBsZWF2ZSB0aGUgcGFnZS4gSWYgeW91IGRvIHNvIGFnYWluLCB3ZSBtYXkgcmVzdHJpY3QgcGF5aW5nIHlvdS5cIilcbiAgICAgICAgLy99XG4gICAgICAgIGFsZXJ0X2FjdGl2ZSA9IGZhbHNlXG4gICAgfVxufSIsImZ1bmN0aW9uIHBhcmFtc1RvT2JqZWN0KGVudHJpZXMpIHtcbiAgY29uc3QgcmVzdWx0ID0ge31cbiAgLy8gZWFjaCAnZW50cnknIGlzIGEgW2tleSwgdmFsdWVdIHR1cHBsZVxuICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBlbnRyaWVzKSB7XG4gICAgcmVzdWx0W2tleV0gPSB2YWx1ZTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgeyBwYXJhbXNUb09iamVjdCB9Il0sIm5hbWVzIjpbIlNFUlZFUl9MT0dfUk9PVCIsIk1PQ0tNT0RFIiwiZGF0YSIsInF1ZXN0aW9uX2kiLCJxdWVzdGlvbiIsInVzZXJzZWxlY3Rpb25fYW5zd2Vyb25seSIsInVzZXJzZWxlY3Rpb25fd2l0aGV4cGxhbmF0aW9uIiwidXNlcnNlbGVjdGlvbl93aXRoZXhwbGFuYXRpb25xdWFsaXR5IiwiaW5zdHJ1Y3Rpb25faSIsImNvdW50X2V4aXRlZF9wYWdlIiwicmVnaXN0ZXJBbnN3ZXJPbmx5VXNlclNlbGVjdGlvbiIsInVzZXJfY2hvaWNlIiwiJCIsImF0dHIiLCJzaG93IiwicmVnaXN0ZXJXaXRoRXhwbGFuYXRpb25Vc2VyU2VsZWN0aW9uIiwicmVnaXN0ZXJXaXRoRXhwbGFuYXRpb25RdWFsaXR5VXNlclNlbGVjdGlvbiIsInJlbW92ZUF0dHIiLCJuZXh0X2luc3RydWN0aW9ucyIsImluY3JlbWVudCIsInZhbCIsImhpZGUiLCJuZXh0X3F1ZXN0aW9uIiwiY2hpbGRyZW4iLCJlYWNoIiwiXyIsImVsIiwibGVuZ3RoIiwidGV4dCIsInRvRml4ZWQiLCJodG1sIiwidmlzdWFsX2ZpZGVsaXR5X2NvbmYiLCJNYXRoIiwicm91bmQiLCJ2aXN1YWxfY29udHJhc3RpdmVuZXNzX2NvbmYiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiYWRkRXZlbnRMaXN0ZW5lciIsIm9uIiwibG9nZ2VkX2RhdGEiLCJhc3luYyIsImdsb2JhbFRoaXMiLCJ1cmxfZGF0YSIsImNvbnNvbGUiLCJsb2ciLCJ1aWQiLCJyZXN1bHQiLCJhamF4IiwiSlNPTiIsInN0cmluZ2lmeSIsInByb2plY3QiLCJwYXlsb2FkIiwidHlwZSIsImNvbnRlbnRUeXBlIiwiUHJvbWlzZSIsInJlc29sdmUiLCJzZXRUaW1lb3V0Iiwic2xlZXAiLCJlIiwibG9nX2RhdGEiLCJ1cmxQYXJhbXMiLCJVUkxTZWFyY2hQYXJhbXMiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsInNlYXJjaCIsInN0YXJ0T3ZlcnJpZGUiLCJnZXQiLCJVSURGcm9tVVJMIiwiZW50cmllcyIsImtleSIsInZhbHVlIiwicGFyYW1zVG9PYmplY3QiLCJxdWV1ZV9pZCIsImZsb29yIiwicmFuZG9tIiwicGFkU3RhcnQiLCJVSURfbWF5YmUiLCJwcm9tcHQiLCJzdGFydHNXaXRoIiwiZ2V0SlNPTiIsIkRhdGUiLCJub3ciLCJsb2FkX2RhdGEiLCJjYXRjaCIsIl9lcnJvciIsInJlbG9hZCIsInRoZW4iLCJuZXdfZGF0YSIsInBhcnNlSW50IiwiYWxlcnRfYWN0aXZlIiwib252aXNpYmlsaXR5Y2hhbmdlIl0sInNvdXJjZVJvb3QiOiIifQ==