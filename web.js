(()=>{"use strict";var t=!1,e=[];let n=-1,i=null,s=null,o=null,r=null,a=0,u=0;function l(t){s=t,$("#button_answeronly_usertrusts").attr("disabled","true"),$("#button_answeronly_userdistrusts").attr("disabled","true"),$("#button_answeronly_userunsure").attr("disabled","true"),0==t?$("#button_answeronly_usertrusts").attr("activedecision","true"):1==t?$("#button_answeronly_userdistrusts").attr("activedecision","true"):2==t&&$("#button_answeronly_userunsure").attr("activedecision","true"),$("#ai_explanation_div").show()}function d(t){o=t,$("#button_withexplanation_usertrusts").attr("disabled","true"),$("#button_withexplanation_userdistrusts").attr("disabled","true"),$("#button_withexplanation_userunsure").attr("disabled","true"),0==t?$("#button_withexplanation_usertrusts").attr("activedecision","true"):1==t?$("#button_withexplanation_userdistrusts").attr("activedecision","true"):2==t&&$("#button_withexplanation_userunsure").attr("activedecision","true"),$("#ai_explanation_quality_div").show()}function _(t){r=t,$("#button_withexplanationquality_usertrusts").attr("disabled","true"),$("#button_withexplanationquality_userdistrusts").attr("disabled","true"),$("#button_withexplanationquality_userunsure").attr("disabled","true"),0==t?$("#button_withexplanationquality_usertrusts").attr("activedecision","true"):1==t?$("#button_withexplanationquality_userdistrusts").attr("activedecision","true"):2==t&&$("#button_withexplanationquality_userunsure").attr("activedecision","true"),$("#button_next").show(),$("#button_next").removeAttr("disabled")}function c(t){a+=t,0==a?$("#button_instructions_prev").attr("disabled","true"):$("#button_instructions_prev").removeAttr("disabled"),a>=6?($("#instructions_and_decorations").show(),$("#button_instructions_next").val("Start study")):($("#instructions_and_decorations").hide(),$("#button_instructions_next").val("Next")),1==a&&($("#instructions_and_decorations").show(),$("#main_box_instructions").hide(),$("#main_box_experiment").show(),b()),$("#main_box_instructions").children(":not(input)").each(((t,e)=>{$(e).hide()})),$(`#instructions_${a}`).show()}function b(){if($("#button_readytoanswer").removeAttr("activedecision"),$("#button_readytoanswer").removeAttr("disabled"),$("#button_readytoanswer").show(),$("#button_answeronly_usertrusts").removeAttr("activedecision"),$("#button_answeronly_usertrusts").removeAttr("disabled"),$("#button_answeronly_userdistrusts").removeAttr("activedecision"),$("#button_answeronly_userdistrusts").removeAttr("disabled"),$("#button_answeronly_userunsure").removeAttr("activedecision"),$("#button_answeronly_userunsure").removeAttr("disabled"),$("#ai_explanation_div").hide(),$("#ai_explanation_quality_div").hide(),$("#button_next").hide(),$("#button_quit").hide(),n+=1,n>=e.length)return $("#main_box_experiment").hide(),void(t?($("#reward_box_mock").text(`Your total reward is $${(0).toFixed(2)} (${n+1} questions answered).`),$("#reward_box_mock").show(),$("#main_box_end_mock").show()):($("#reward_box").text(`Your total reward is $${(0).toFixed(2)} (${n+1} questions answered).`),$("#reward_box").show(),$("#main_box_end").show()));i=e[n],$("#question_span").html(i.question),$("#ai_prediction_span").html(i.predicted_answer),$("#ai_explanation_span").html(i.generated_rationale);let s=Math.round(100*i["visual fidelity"]);$("#explanation_fidelity_span").html(`${s}%`);let o=Math.round(100*i.contrastiveness);$("#explanation_contrastiveness_span").html(`${o}%`),$("#progress").text(`Progress: ${n+1} / ${e.length}`)}document.getElementById("button_answeronly_usertrusts")?.addEventListener("click",(()=>l(0))),document.getElementById("button_answeronly_userdistrusts")?.addEventListener("click",(()=>l(1))),document.getElementById("button_answeronly_userunsure")?.addEventListener("click",(()=>l(2))),document.getElementById("button_withexplanation_usertrusts")?.addEventListener("click",(()=>d(0))),document.getElementById("button_withexplanation_userdistrusts")?.addEventListener("click",(()=>d(1))),document.getElementById("button_withexplanation_userunsure")?.addEventListener("click",(()=>d(2))),document.getElementById("button_withexplanationquality_usertrusts")?.addEventListener("click",(()=>_(0))),document.getElementById("button_withexplanationquality_userdistrusts")?.addEventListener("click",(()=>_(1))),document.getElementById("button_withexplanationquality_userunsure")?.addEventListener("click",(()=>_(2))),$("#button_instructions_next").on("click",(()=>c(1))),$("#button_instructions_prev").on("click",(()=>c(-1))),$("#button_next").on("click",(()=>{if(-1!=n){let t={question_i:n};t.question=i,t.count_exited_page=u,u=0}b()}));const h=new URLSearchParams(window.location.search),w=h.get("start"),m=h.get("uid");if(globalThis.url_data=function(t){const e={};for(const[n,i]of t)e[n]=i;return e}(h.entries()),null!=m){if(globalThis.uid=m,"prolific_random"==globalThis.uid){let t=`${Math.floor(10*Math.random())}`.padStart(3,"0");globalThis.uid=`${h.get("prolific_queue_name")}_${t}`}}else{let t=null;for(;null==t;)t=prompt("Enter your user id. Please get in touch if you were not assigned an id but wish to participate in this experiment.");globalThis.uid=t}globalThis.url_data.session_id.startsWith("demo")&&(t=!0),console.log("Running with UID",globalThis.uid),async function(){return await $.getJSON(`baked_queues/${globalThis.uid}.json?t=${Date.now()}`)}().catch((t=>{console.log("Invalid user id."),console.log(globalThis.uid),window.location.reload()})).then((t=>{e=t,null!=w&&(n=parseInt(w)-1,console.log("Starting from",n)),c(0),$("#main_box_instructions").show(),$("#instructions_and_decorations").hide()})),console.log("Starting session with UID:",globalThis.uid);let x=!1;document.onvisibilitychange=()=>{x||(u+=1,x=!0,x=!1)}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,